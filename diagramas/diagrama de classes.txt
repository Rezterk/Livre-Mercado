@startuml
Class Cliente {
    -CPF : String
    -nome : String
    -enderecos : Endereco[] 
    -estoque : ColecaoItens
    -carrinho : ColecaoItens
    -contaBancaria : ContaBancaria 

    +getCarrinho() : Carrinho
    +getProdutos(Categoria) : Produto[]
  }

  Class ColecaoItens {
    -produtos : Item[] 

    +getItens() : Item[]
    +addItem(Item)
    +removeItem(Item)
    +removeQuantidade(Item, quantidade)
    +addQuantidade(Item, quantidade)
  }

  Class Item {
    -produto : Produto 
    -quantidade : Integer 

    +getProduto() : Produto
    +getQuantidade() : Integer
  }

  Class Produto {
    -nome : String 
    -preco : Double 
    -categoria : Categoria 
    -vendedor : Cliente 

    +getPreco() : Double
    +getCategoria() : Categoria 
    +getVendedor() : Vendedor 
    +setPreco(preco)
  }

  Class Endereco {
    -logradouro : String 
    -numero : String 
    -CEP : String 
    
    +getLogradouro() : String
    +getNumero() : String
    +getCEP() : String
  }

  Class ContaBancaria {
    -saldo : Double
    -credito : Double
    -limiteCredito : Double
    -metodosPagamento : MetodoPagamento[]

    +depositar(quantia)
    +retirar(quantia)
    
  }

  Abstract MetodoPagamento {
    -contaVinculada : ContaBancaria

    +{abstract} pague()
  }

  Class Pix {
    +pague()
  }

  Class CartaoCredito {
    +pague()
  }

  Class Transferencia {
    +pague()
  }

  Abstract CategoriaAbstrata {
    -nome : String
    -produtos : Produto[]

    +getProdutos() : Produto[]
    +getNome() : String
  }

  Class CategoriaConcreta {
    -nome : String
    -produtos : Produto[]

    +getProdutos() : Produto[]
    +getNome() : String
  }

  Class CategoriaComposta {
    -nome : String
    -produtos : Produto[]
    -filhas : CategoriaAbstrata[]
    
    +add(CategoriaAbstrata)
    +remove(CategoriaAbstrata)
    +getFilhas() : CategoriaAbstrata
    +getProdutos() : Produto[]
    +getNome() : String
  }

  Interface Autenticador_if {
    +autentique_se(Credencial_if) : Auntenticacao
    +getAuntenticacao() : Auntenticacao
    +clearAutenticacao()
  }

  Class AutenticadorDefault {
    -autenticacao : Autenticacao

    +autentique_se(Credencial_if) : Auntenticacao
    +getAuntenticacao() : Auntenticacao
    +clearAutenticacao()
  }

  Class Autenticacao {
    -credencialUsada : Credencial_if

    +«constructor» Autenticacao(Credencial_if)
    +getCredencialUsada() : Credencial_if
  }

  Interface Credencial_if {
    
  }

  Class CredencialLoginSenha {
    -usuario : String
    -senha : String

    +«constructor» CredencialLoginSenha(usuario, senha)
    +getUsuario() : String
    +getSenha() : String
  }



Cliente "2" *-- ColecaoItens
Cliente *-- "0..*" Endereco
Cliente *- ContaBancaria

ColecaoItens "0..*" *-- Item
Cliente --o Produto
Produto --o Item

ContaBancaria *-- MetodoPagamento
MetodoPagamento <|-- Pix
MetodoPagamento <|-- CartaoCredito
MetodoPagamento <|-- Transferencia

Produto o-- CategoriaAbstrata
CategoriaAbstrata <|-- CategoriaConcreta
CategoriaAbstrata <|-- CategoriaComposta
CategoriaAbstrata <--o CategoriaComposta

Autenticador_if <|.. AutenticadorDefault
AutenticadorDefault o- Autenticacao
Credencial_if <|.. CredencialLoginSenha
Autenticacao o-- Credencial_if
@enduml
